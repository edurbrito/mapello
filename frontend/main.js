//From https://github.com/EvanHahn/ScriptInclude
include = function () { function f() { var a = this.readyState; (!a || /ded|te/.test(a)) && (c--, !c && e && d()) } var a = arguments, b = document, c = a.length, d = a[c - 1], e = d.call; e && c--; for (var g, h = 0; c > h; h++)g = b.createElement("script"), g.src = arguments[h], g.async = !0, g.onload = g.onerror = g.onreadystatechange = f, (b.head || b.getElementsByTagName("head")[0]).appendChild(g) };
serialInclude = function (a) { var b = console, c = serialInclude.l; if (a.length > 0) c.splice(0, 0, a); else b.log("Done!"); if (c.length > 0) { if (c[0].length > 1) { var d = c[0].splice(0, 1); b.log("Loading " + d + "..."); include(d, function () { serialInclude([]); }); } else { var e = c[0][0]; c.splice(0, 1); e.call(); }; } else b.log("Finished."); }; serialInclude.l = new Array();

let app;

//Include additional files here
serialInclude(['../lib/CGF.js', 'XMLscene.js', 'MySceneGraph.js', 'MyInterface.js',
  'primitives/MyRectangle.js', 'primitives/MyCylinder.js', 'primitives/MyCircle.js',
  'primitives/MyTriangle.js', 'primitives/MySphere.js', 'primitives/MyTorus.js', 'primitives/MyCube.js', 'primitives/MyWater.js', 'utils.js', 'MyNode.js',
  'animation/Keyframe.js', 'animation/MyAnimation.js', 'animation/KeyframeAnimation.js', 'animation/CameraAnimation.js', 'sprites/MySpriteSheet.js',
  'sprites/MySpriteText.js', 'sprites/MySpriteAnimation.js', 'nurbs/MyPlane.js', 'nurbs/MyPatch.js', 'nurbs/MyBarrel.js',

  'game/MyTheme.js', 'game/GameScene.js', 'game/GameOrchestrator.js', 'game/StateMachine.js',
  'game/graphs/ScenarioSceneGraph.js', 'game/graphs/GameSceneGraph.js',
  'game/elements/MyGameElement.js', 'game/elements/MyBoard.js', 'game/elements/MyPiece.js', 'game/elements/MyTile.js',
  'game/elements/MyAuxiliarBoard.js', 'game/elements/MyPlayerPiece.js', 'game/elements/MyBonus.js', 'game/elements/MyMarker.js',
  'game/elements/MyTimer.js',

  'game/MyAnimator.js', 'game/MyGameMove.js', 'game/PrologController.js', 'game/MyGameState.js',

  main = function () {
    // Standard application, scene and interface setup
    app = new CGFapplication(document.body);
    var myInterface = new MyInterface();
    var myScene = new GameOrchestrator(myInterface);

    app.init();

    app.setScene(myScene);
    app.setInterface(myInterface);
    myInterface.initButtons(myScene);
    myInterface.setActiveCamera(myScene.camera);

    // Creates and load the themes and associates them to scene.
    let sthemes = ["river-side", "living-room"]
    myScene.setThemes(sthemes);

    // Starts the progress bar while loading the scene
    progress_bar();
  }

]);

function progress_bar() {
  var id = setInterval(frame, 20);

  function frame() {
    let themes = app.scene.themes;
    let width = 0;
    let count = 0;
    for (const theme in themes) {
      if (themes.hasOwnProperty(theme)) {
        const t = themes[theme];
        width += t.loading_percentage()
        count++;
      }
    }
    width = Math.floor(width / count);
    var elem = document.getElementById("bar");
    elem.style.width = width + "%";
    if (width >= 98) {
      clearInterval(id);
      elem.style.display = "none";
      document.getElementById("container").style.display = "flex";
    }
  }
}

function initGame() {
  try {
    let theme = app.scene.themes[app.scene.selectedTheme];
    if (theme.is_loaded() && app.scene.sceneInited) {
      let form_elems = document.querySelector("#container").elements;
      let settings = {}
      for (const e of form_elems) {
        settings[e.name] = e.value.toLowerCase();
      }

      // The game settings and board generated by the prolog
      app.scene.setGame(settings);

      let interface = document.querySelector("#interface");
      interface.remove();
      app.run();
    }
    else {
      console.log("Not Loaded Yet!", theme.loading_percentage());
    }
  }
  catch (err) {
    console.log("Prolog not active");
  }


}